# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
name: Python application

on:
  push:
    branches:
      - main
      - testing_tags
  pull_request:
    branches: 
      - main
      - testing_tags

jobs:
  build:

    runs-on: ubuntu-latest
    services:
      counterfit:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
        env:
          discovery.type: single-node
        # These options act as a ping to check the service has started, we probably don't need them.
        # We need to select a container with python on and install counterfit onto it and push to a public registry.
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
        # <port on host>:<port on container>
        # Counterfit will be 5000:5000
        - 9200:9200
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        docker ps
        sleep 60
        curl -X GET http://localhost:9200/
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        # flake8 --max-complexity 10 . --count --select=E9,F63,F7,F82 --show-source --statistics 
        # We break on any error and a McCabe Complexity of 10 or more. The GitHub editor is 127 chars wide so we override the default.
        flake8 . --count --max-complexity=10 --max-line-length=127 --show-source
    # - name: Test with pytest
    #   run: |
    #     pytest
    - name: Create tag
      uses: actions/github-script@v3
      with:
        github-token: ${{ github.token }}
        script: |
          # github.git.createRef({
          #   owner: context.repo.owner,
          #   repo: context.repo.repo,
          #   ref: "refs/tags/tagname",
          #   sha: context.sha
          # })
          #get highest tag number
          VERSION=`git describe --abbrev=0 --tags`

          #replace . with space so can split into an array
          VERSION_BITS=(${VERSION//./ })

          #get number parts and increase last one by 1
          VNUM1=${VERSION_BITS[0]}
          VNUM2=${VERSION_BITS[1]}
          VNUM3=${VERSION_BITS[2]}
          VNUM1=`echo $VNUM1 | sed 's/v//'`

          # Check for #major or #minor in commit message and increment the relevant version number
          MAJOR=`git log --format=%B -n 1 HEAD | grep '#major'`
          MINOR=`git log --format=%B -n 1 HEAD | grep '#minor'`

          if [ "$MAJOR" ]; then
              echo "Update major version"
              VNUM1=$((VNUM1+1))
              VNUM2=0
              VNUM3=0
          elif [ "$MINOR" ]; then
              echo "Update minor version"
              VNUM2=$((VNUM2+1))
              VNUM3=0
          else
              echo "Update patch version"
              VNUM3=$((VNUM3+1))
          fi


          #create new tag
          NEW_TAG="v$VNUM1.$VNUM2.$VNUM3"

          echo "Updating $VERSION to $NEW_TAG"

          #get current hash and see if it already has a tag
          GIT_COMMIT=`git rev-parse HEAD`
          NEEDS_TAG=`git describe --contains $GIT_COMMIT`

          #only tag if no tag already (would be better if the git describe command above could have a silent option)
          if [ -z "$NEEDS_TAG" ]; then
              echo "Tagged with $NEW_TAG (Ignoring fatal:cannot describe - this means commit is untagged) "
              git tag $NEW_TAG
              git push --tags
          else
              echo "Already a tag on this commit"
          fi
